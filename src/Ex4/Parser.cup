/*************/
/* Based on a template by Oren Ish-Shalom */
/*************/


/*************/
/* IMPORTS */
/*************/

import java_cup.runtime.*;
import ast.*;
import java.util.List;
import java.util.LinkedList;

parser code
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}

	// Override default error reporting in parser
	public void report_error(String message, Object info)
	{
	    System.err.print("Syntax error at line " + lexer.getLine() + " of input. Parser\n");
		System.exit(1);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
    try {
	s = lexer.next_token();
	// System.out.print(s.sym);
	// System.out.print("[");
	// System.out.print(lexer.getLine());
	// System.out.print(":");
	// System.out.print(lexer.getCharPos());
	// System.out.print("] ");
	// System.out.print(sym.terminalNames[s.sym]);
	// if (s.value != null)
	// {
	//	System.out.print("( ");
	//	System.out.print(s.value);
	//	System.out.print(" )");
	// }
	// System.out.print("\n");
	return s;
     } catch (java.lang.Error e) {
         System.err.print("Syntax error at line " + lexer.getLine() + " of input. Lexer\n");
         System.exit(1);
         return null;
     }
:};

/*************/
/* TERMINALS */
/*************/
terminal CLASS;
terminal EXTENDS;
terminal PUBLIC;
terminal STATIC;
terminal VOID;
terminal STRING_ARR;
terminal INT;
terminal BOOLEAN;
terminal NEW;
terminal MAIN;
terminal INT_ARRAY;
terminal ARRAY_LENGTH;
terminal WHILE;
terminal IF;
terminal ELSE;
terminal PRINT;
terminal TRUE;
terminal FALSE;
terminal RETURN;
terminal THIS;
terminal SEMICOLON;
terminal NOT;
terminal AND;
terminal OR;
terminal LT;
terminal ASSIGN;
terminal DOT;
terminal COMMA;
terminal PLUS;
terminal MINUS;
terminal MULT;
terminal LPAREN;
terminal RPAREN;
terminal LCURLY;
terminal RCURLY;
terminal LSQUARE;
terminal RSQUARE;
terminal ID;
terminal NUMBER;
terminal EOF;


/*****************/
/* NON TERMINALS */
/*****************/
non terminal Program prog;
non terminal Expr expr;
non terminal MainClass mainClass;
non terminal ClassDecl classDecl;
non terminal VarDecl varDecl;
non terminal MethodDecl methodDecl;
non terminal AstType type;
non terminal Statement statement;
non terminal List<ClassDecl> classDecls;
non terminal List<VarDecl> formals;
non terminal List<MethodDecl> methodDecl;
non terminal List<Statement> statements;
non terminal List<Expr>

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/

/************************/
/* INITIAL NON TERMINAL */
/************************/
start with prog;

/********************/
/* PRODUCTION RULES */
/********************/

prog            ::=     ;