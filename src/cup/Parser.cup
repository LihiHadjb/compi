/*************/
/* Based on a template by Oren Ish-Shalom */
/*************/


/*************/
/* IMPORTS */
/*************/

import java_cup.runtime.*;
import ast.*;
import java.util.List;
import java.util.LinkedList;

parser code
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}

	// Override default error reporting in parser
	public void report_error(String message, Object info)
	{
	    System.err.print("Syntax error at line " + lexer.getLine() + " of input.\n");
		System.exit(1);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
    try {
	s = lexer.next_token();
	// System.out.print(s.sym);
	// System.out.print("[");
	// System.out.print(lexer.getLine());
	// System.out.print(":");
	// System.out.print(lexer.getCharPos());
	// System.out.print("] ");
	// System.out.print(sym.terminalNames[s.sym]);
	// if (s.value != null)
	// {
	//	System.out.print("( ");
	//	System.out.print(s.value);
	//	System.out.print(" )");
	// }
	// System.out.print("\n");
	return s;
     } catch (java.lang.Error e) {
         System.err.print("Syntax error at line " + lexer.getLine() + " of input.\n");
         System.exit(1);
         return null;
     }
:};

/*************/
/* TERMINALS */
/*************/
terminal CLASS;
terminal EXTENDS;
terminal PUBLIC;
terminal STATIC;
terminal VOID;
terminal STRING_ARR;
terminal INT;
terminal BOOLEAN;
terminal NEW;
terminal MAIN;
terminal INT_ARRAY;
terminal ARRAY_LENGTH;
terminal METHOD_CALL;
terminal WHILE;
terminal IF;
terminal ELSE;
terminal PRINT;
terminal TRUE;
terminal FALSE;
terminal RETURN;
terminal THIS;
terminal SEMICOLON;
terminal NOT;
terminal AND;
terminal LT;
terminal ASSIGN;
terminal COMMA;
terminal PLUS;
terminal MINUS;
terminal MULT;
terminal LPAREN;
terminal RPAREN;
terminal LCURLY;
terminal RCURLY;
terminal LSQUARE;
terminal RSQUARE;
terminal String ID;
terminal int NUMBER;


/*****************/
/* NON TERMINALS */
/*****************/
non terminal Program prog;
non terminal MainClass mainClass;
non terminal LinkedList<ClassDecl> classDecls;

non terminal ClassDecl classDecl;
non terminal LinkedList<VarDecl> varDecls;
non terminal LinkedList<MethodDecl> methodDecls;

non terminal MethodDecl methodDecl;
non terminal FormalArg formal;
non terminal LinkedList<FormalArg> formals;
non terminal LinkedList<FormalArg> commaFormals;
non terminal LinkedList<Statement> statements;
non terminal Expr expr;

non terminal LinkedList<Expr> exprList;
non terminal LinkedList<Expr> commaExprList;

non terminal Statement statement;
non terminal VarDecl varDecl;

non terminal AstType type;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/

precedence right    ASSIGN;
precedence left     AND;
precedence left     LT;
precedence left     PLUS, MINUS;
precedence left     MULT;
precedence right    NEW;
precedence right    NOT;
precedence left     LSQUARE, LPAREN, LCURLY, METHOD_CALL, ARRAY_LENGTH;


/************************/
/* INITIAL NON TERMINAL */
/************************/
start with prog;

/********************/
/* PRODUCTION RULES */
/********************/



prog            ::=     mainClass:main classDecls:classes  {: RESULT = new Program(main, classes); :}
;

classDecls      ::=     classDecls:clsList classDecl:cls  {: clsList.addLast(cls);
                                                               RESULT = clsList;    :}
                    |   /* empty */                         {: RESULT = new LinkedList<ClassDecl>();    :}
;

mainClass       ::=     CLASS ID:name LCURLY PUBLIC STATIC VOID MAIN LPAREN STRING_ARR ID:args RPAREN
                        LCURLY statement:mainStatement RCURLY RCURLY
                        {: RESULT = new MainClass(name, args, mainStatement); :}
;


classDecl      ::=      CLASS ID:name EXTENDS ID:superName LCURLY varDecls:fields methodDecls:methods RCURLY
                        {:  RESULT = new ClassDecl(name, superName, fields, methods);  :}
                   |    CLASS ID:name LCURLY varDecls:fields methodDecls:methods RCURLY

                        {:  RESULT = new ClassDecl(name, null, fields, methods);  :}
;


methodDecls      ::=     methodDecls:methods methodDecl:method  {: methods.addLast(method);
                                                                   RESULT = methods;       :}
                    |   /* empty */                             {: RESULT = new LinkedList<MethodDecl>(); :}
;

methodDecl      ::=      PUBLIC type:retType ID:name LPAREN formals:formalArgs RPAREN LCURLY
                         varDecls:localVars statements:body RETURN expr:ret SEMICOLON RCURLY
                         {:  RESULT = new MethodDecl(retType, name, formalArgs, localVars, body, ret, lexer.getLine());  :}
;

statements      ::=     statement:s statements:sList  {: sList.addFirst(s);
                                                         RESULT = sList;     :}
                    |   /* empty */                   {: RESULT = new LinkedList<Statement>(); :}
;

statement       ::=    LCURLY statements:sList RCURLY
                        {: RESULT = new BlockStatement(sList);     :}
                    |  IF LPAREN expr:cond RPAREN statement:thenCase ELSE statement:elseCase
                        {: RESULT = new IfStatement(cond, thenCase, elseCase);    :}
                    |  WHILE LPAREN expr:cond RPAREN statement:body
                        {: RESULT = new WhileStatement(cond, body);    :}
                    |  PRINT LPAREN expr:e RPAREN SEMICOLON
                        {: RESULT = new SysoutStatement(e);    :}
                    |  ID:name ASSIGN expr:e SEMICOLON
                        {: RESULT = new AssignStatement(name, e);    :}
                    |  ID:lv LSQUARE expr:index RSQUARE ASSIGN expr:rv SEMICOLON
                        {: RESULT = new AssignArrayStatement(lv, index, rv);    :}
;


formals         ::=     formal:f commaFormals:fList  {: fList.addFirst(f);
                                                         RESULT = fList;     :}
                    |   /* empty */                   {: RESULT = new LinkedList<FormalArg>(); :}
;


commaFormals    ::=     COMMA formal:f commaFormals:fList  {: fList.addFirst(f);
                                                         RESULT = fList;     :}
                    |   /* empty */                   {: RESULT = new LinkedList<FormalArg>(); :}
;

formal         ::=     type:formalType ID:name        {: RESULT = new FormalArg(formalType, name, lexer.getLine());     :}
;


varDecls        ::=     varDecls:varList varDecl:var  {: varList.addLast(var);
                                                         RESULT = varList;     :}
                    |   /* empty */                   {: RESULT = new LinkedList<VarDecl>(); :}
;

varDecl         ::=     type:varType ID:name SEMICOLON       {: RESULT = new VarDecl(varType, name, lexer.getLine());     :}
;

exprList        ::=     expr:e commaExprList:eList         {: eList.addFirst(e);
                                                         RESULT = eList;     :}
                    |   /* empty */                   {: RESULT = new LinkedList<Expr>(); :}
;

commaExprList   ::=     COMMA expr:e commaExprList:eList         {: eList.addFirst(e);
                                                         RESULT = eList;     :}
                    |   /* empty */                   {: RESULT = new LinkedList<Expr>(); :}
;

expr            ::=    expr:e1 AND expr:e2
                        {: RESULT = new AndExpr(e1, e2);     :}
                    |  expr:e1 LT expr:e2
                        {: RESULT = new LtExpr(e1, e2);    :}
                    |  expr:e1 PLUS expr:e2
                        {: RESULT = new AddExpr(e1, e2);    :}
                    |  expr:e1 MINUS expr:e2
                        {: RESULT = new SubtractExpr(e1, e2);    :}
                    |  expr:e1 MULT expr:e2
                        {: RESULT = new MultExpr(e1, e2);    :}
                    |  NOT expr:e
                        {: RESULT = new NotExpr(e);    :}
                    |  expr:e LSQUARE expr:index RSQUARE
                        {: RESULT = new ArrayAccessExpr(e, index);    :}
                    |  expr:e ARRAY_LENGTH
                        {: RESULT = new ArrayLengthExpr(e);    :}
                    |  expr:e METHOD_CALL ID:name LPAREN exprList:actuals RPAREN
                        {: RESULT = new MethodCallExpr(e, name, actuals);    :}
                    |  NUMBER:num
                        {: RESULT = new IntegerLiteralExpr(num);    :}
                    |  FALSE
                        {: RESULT = new FalseExpr();    :}
                    |  TRUE
                        {: RESULT = new TrueExpr();    :}
                    |  THIS
                        {: RESULT = new ThisExpr();    :}
                    |  NEW INT LSQUARE expr:length RSQUARE
                        {: RESULT = new NewIntArrayExpr(length);    :}
                    |  NEW ID:className LPAREN RPAREN
                        {: RESULT = new NewObjectExpr(className);    :}
                    |  ID:id
                        {: RESULT = new IdentifierExpr(id);    :}
                    |  LPAREN expr:e RPAREN
                        {: RESULT = e; :}

;


type            ::=    INT           {: RESULT = new IntAstType();     :}
                    |  BOOLEAN       {: RESULT = new BoolAstType();     :}
                    |  INT_ARRAY     {: RESULT = new IntArrayAstType();     :}
                    |  ID:className    {: RESULT = new RefType(className);     :}
;